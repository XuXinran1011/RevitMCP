---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
##RevitMCP代码模块开发标准流程

以下每一个三级标题为一个标准步骤，一个标准步骤执行结束后将执行的概况写入"开发日志.md"中，然后等待指令开始下一个步骤

   ###Sprint规划与模块选择
   - 查阅@REVITMCP_MODULES_CHECKLIST.md，确定待开发模块
   - 根据优先级（高/中/低）和依赖关系图选择本Sprint要开发的模块
   - 对于有跨项目依赖的模块，确定依赖处理策略（实现依赖、模拟依赖或并行开发）
   ###依赖检查与准备
   - 详细检查所选模块的所有依赖项的状态
   - 对于未完成的依赖，选择适当策略：
     - 优先开发关键依赖
     - 创建接口模拟（Mock）
     - 提供临时实现
   - 制定测试策略，包括单元测试、集成测试和性能测试计划
   ###接口设计与评审
   - 对于领域服务或仓储接口，先设计接口再实现
   - 明确方法签名、参数、返回值和异常
   - 添加XML文档注释说明接口用途和使用方法
   - 进行接口稳定性评审，确保接口设计满足所有使用方需求
   ###代码实现
   - 遵循领域驱动设计原则编写代码
   - 领域模型保持纯净，不依赖外部系统
   - 应用层负责协调，不包含业务逻辑
   - 基础设施层提供技术实现
   - 定期提交代码，确保每次提交都是功能完整的单元
   ###单元测试编写
   - 为模块创建对应的测试类
   - 使用xUnit编写测试用例
   - 使用Moq模拟依赖项
   - 使用FluentAssertions验证结果
   - 确保代码覆盖率达到预定目标（如80%）
   ###集成测试与Revit兼容性测试
   - 编写集成测试验证模块与其依赖项的协作
   - 对于Revit API交互，使用RevitTestFramework进行测试
   - 验证不同Revit版本的兼容性
   - 对性能关键模块进行性能基准测试
   ###架构一致性与代码质量检查
    ####架构一致性检查清单

      - [ ] 所有领域模型保持独立，不依赖外部层
      - [ ] 所有仓储接口定义在领域层，实现在基础设施层
      - [ ] 应用层服务不包含业务规则，只协调领域对象
      - [ ] 表示层不直接访问基础设施层
      - [ ] 跨层通信使用接口或DTO，不直接传递领域对象
      - [ ] 领域事件用于跨聚合根或模块的通信
      - [ ] 共享层模型不包含业务逻辑，只有数据结构和接口定义
      - [ ] Plugin和Server项目正确引用共享层而不是复制代码
      - [ ] 共享层接口版本稳定，避免破坏性更改

   - 确保代码遵循依赖方向（从外到内）
   - 检查是否违反了DDD原则
   - 验证是否正确使用了设计模式（CQRS、工厂、适配器等）
   - 使用静态代码分析工具检查代码质量
   - 识别并记录技术债务
   ###文档与注释更新
   - 添加或更新代码注释，解释"为什么"而非"是什么"
   - 为公共API添加XML文档注释
   - 更新@REVITMCP_MODULES_CHECKLIST.md中模块的状态
   - 更新相关设计文档或开发指南
   ###正式代码审查
   - 根据
   - 重点关注:
     - 架构一致性
     - 性能影响
     - 安全隐患
     - 可维护性
   - 记录审查结果并解决发现的问题
   ###模块集成与系统测试
   - 将模块与现有系统集成
   - 执行系统级测试验证整体功能
   - 验证模块对系统性能的影响
   - 确认错误处理和边缘情况
   ###竣工确认与状态更新
   - 根据预定义的竣工标准评估模块完成度
   - 更新@REVITMCP_MODULES_CHECKLIST.md中模块的状态
   - 将模块状态从"⬜ 未开始"依次更新为适当状态
   - 最后确认无误后标记为"✓ 已完成"
###提交到本地仓库
- 必须在完成新代码测试，确保没有可解决的错误和警告后才能进行git。
- 使用Git将代码提交到本地仓库，遵循以下规范：
  git add [文件路径]
  git commit -m "feat(领域): 添加/修改XXX模块"
- 提交信息格式规范：
    - feat: 新功能
    - fix: 修复bug
    - docs: 文档更新
    - style: 代码格式调整
    - refactor: 重构代码
    - test: 添加测试
    - perf: 性能优化
    - chore: 构建过程或辅助工具变动
- 提交内容应该是功能完整的最小单元，避免将无关改动合并在一次提交中
- 重要模块提交后应创建标签：
  git tag -a v0.1.0-[模块名] -m "完成[模块名]的实现"


